/**
 * My Title
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from './encoder';

import { Observable } from 'rxjs';

import { OAuthService } from 'angular-oauth2-oidc';

import { NotificationMessage } from '../../models/notification/notificationMessage';
import { UserNotification } from '../../models/notification/userNotification';
import { UserNotificationBulkRequest } from '../../models/notification/userNotificationBulkRequest';

import { BASE_NOTIFICATION_PATH, COLLECTION_FORMATS, NotificationInjector }                     from './variables';
import { Configuration }                                     from './configuration';

@Injectable()
export class NotificationService {

    protected basePath = 'http://localhost:5002';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() configuration: Configuration, private oauthService: OAuthService) {
      let basePath: string = NotificationInjector.get(BASE_NOTIFICATION_PATH);
      if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     *
     *
     * @param request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationAddNotifications(request: UserNotificationBulkRequest, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public notificationAddNotifications(request: UserNotificationBulkRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public notificationAddNotifications(request: UserNotificationBulkRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public notificationAddNotifications(request: UserNotificationBulkRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling notificationAddNotifications.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/notification/users/ids`,
            request,
            {
                headers: this.getHeaders(),
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id
     * @param messsage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationAddUserNotification(id: string, messsage: NotificationMessage, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public notificationAddUserNotification(id: string, messsage: NotificationMessage, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public notificationAddUserNotification(id: string, messsage: NotificationMessage, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public notificationAddUserNotification(id: string, messsage: NotificationMessage, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling notificationAddUserNotification.');
        }

        if (messsage === null || messsage === undefined) {
            throw new Error('Required parameter messsage was null or undefined when calling notificationAddUserNotification.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/notification/users/${encodeURIComponent(String(id))}`,
            messsage,
            {
                headers: this.getHeaders(),
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id
     * @param messsage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationEditNotification(id: string, messsage: NotificationMessage, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public notificationEditNotification(id: string, messsage: NotificationMessage, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public notificationEditNotification(id: string, messsage: NotificationMessage, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public notificationEditNotification(id: string, messsage: NotificationMessage, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling notificationEditNotification.');
        }

        if (messsage === null || messsage === undefined) {
            throw new Error('Required parameter messsage was null or undefined when calling notificationEditNotification.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch(`${this.basePath}/notification/${encodeURIComponent(String(id))}`,
            messsage,
            {
                headers: this.getHeaders(),
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationGetAll(observe?: 'body', reportProgress?: boolean): Observable<Array<UserNotification>>;
    public notificationGetAll(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UserNotification>>>;
    public notificationGetAll(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UserNotification>>>;
    public notificationGetAll(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];

        return this.httpClient.get<Array<UserNotification>>(`${this.basePath}/notification/all`,
            {
                headers: this.getHeaders(),
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationGetNotification(id: string, observe?: 'body', reportProgress?: boolean): Observable<UserNotification>;
    public notificationGetNotification(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserNotification>>;
    public notificationGetNotification(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserNotification>>;
    public notificationGetNotification(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling notificationGetNotification.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];

        return this.httpClient.get<UserNotification>(`${this.basePath}/notification/${encodeURIComponent(String(id))}`,
            {
                headers: this.getHeaders(),
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id
     * @param onlyOpen
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationGetUserNotifications(id: string, onlyOpen?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<UserNotification>>;
    public notificationGetUserNotifications(id: string, onlyOpen?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UserNotification>>>;
    public notificationGetUserNotifications(id: string, onlyOpen?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UserNotification>>>;
    public notificationGetUserNotifications(id: string, onlyOpen?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling notificationGetUserNotifications.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (onlyOpen !== undefined && onlyOpen !== null) {
            queryParameters = queryParameters.set('onlyOpen', <any>onlyOpen);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];

        return this.httpClient.get<Array<UserNotification>>(`${this.basePath}/notification/users/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                headers: this.getHeaders(),
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationSetStatusClosed(id: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public notificationSetStatusClosed(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public notificationSetStatusClosed(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public notificationSetStatusClosed(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling notificationSetStatusClosed.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];

        return this.httpClient.delete(`${this.basePath}/notification/users/${encodeURIComponent(String(id))}`,
            {
                headers: this.getHeaders(),
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    private getHeaders() {
      const token = this.oauthService.getAccessToken();
      return !!token
        ? new HttpHeaders({
            Authorization: 'Bearer ' + token
          })
        : new HttpHeaders();
    }

}
