﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketManagement.Data.Context;

namespace TicketManagement.Data.Migrations
{
    [DbContext(typeof(TicketContext))]
    [Migration("20190212182000_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028");

            modelBuilder.Entity("TicketManagement.Data.DbModels.LocationAddress", b =>
            {
                b.Property<string>("LocationAddressId")
                    .ValueGeneratedOnAdd();

                b.Property<string>("City");

                b.Property<string>("Country");

                b.Property<string>("Flat");

                b.Property<string>("House");

                b.Property<string>("Street");

                b.HasKey("LocationAddressId");

                b.ToTable("LocationAddresses");
            });

            modelBuilder.Entity("TicketManagement.Data.DbModels.SellerAddress", b =>
            {
                b.Property<string>("SellerAddressId")
                    .ValueGeneratedOnAdd();

                b.Property<string>("City");

                b.Property<string>("Country");

                b.Property<string>("Flat");

                b.Property<string>("House");

                b.Property<string>("Street");

                b.HasKey("SellerAddressId");

                b.ToTable("SellerAddresses");
            });

            modelBuilder.Entity("TicketManagement.Data.DbModels.Ticket", b =>
            {
                b.Property<string>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<string>("AdditionalData");

                b.Property<DateTime>("CreatedDate");

                b.Property<string>("EventLink");

                b.Property<bool>("Free");

                b.Property<string>("LocationEventLocationAddressId");

                b.Property<string>("Name");

                b.Property<string>("PaymentSystems");

                b.Property<decimal?>("Price");

                b.Property<string>("SellerAdressSellerAddressId");

                b.Property<string>("SellerPhone");

                b.Property<int>("Status");

                b.Property<DateTime>("TimeActual");

                b.Property<int>("TypeEvent");

                b.Property<string>("UserInfoId");

                b.HasKey("Id");

                b.HasIndex("LocationEventLocationAddressId");

                b.HasIndex("SellerAdressSellerAddressId");

                b.HasIndex("UserInfoId");

                b.ToTable("Tickets");
            });

            modelBuilder.Entity("TicketManagement.Data.DbModels.UserInfo", b =>
            {
                b.Property<string>("UserInfoId")
                    .ValueGeneratedOnAdd();

                b.Property<string>("FirstName");

                b.Property<string>("LastName");

                b.Property<string>("TicketId");

                b.HasKey("UserInfoId");

                b.HasIndex("TicketId");

                b.ToTable("UserInfos");
            });

            modelBuilder.Entity("TicketManagement.Data.DbModels.Ticket", b =>
            {
                b.HasOne("TicketManagement.Data.DbModels.LocationAddress", "LocationEvent")
                    .WithMany("Tickets")
                    .HasForeignKey("LocationEventLocationAddressId")
                    .OnDelete(DeleteBehavior.Restrict);

                b.HasOne("TicketManagement.Data.DbModels.SellerAddress", "SellerAdress")
                    .WithMany("Tickets")
                    .HasForeignKey("SellerAdressSellerAddressId")
                    .OnDelete(DeleteBehavior.Restrict);

                b.HasOne("TicketManagement.Data.DbModels.UserInfo", "User")
                    .WithMany("UserTickets")
                    .HasForeignKey("UserInfoId")
                    .OnDelete(DeleteBehavior.Restrict);
            });

            modelBuilder.Entity("TicketManagement.Data.DbModels.UserInfo", b =>
            {
                b.HasOne("TicketManagement.Data.DbModels.Ticket")
                    .WithMany("RespondedUsers")
                    .HasForeignKey("TicketId");
            });
#pragma warning restore 612, 618
        }
    }
}
